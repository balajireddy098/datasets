Experiment – 04                                                                                       
Aim:  Write node.js program to create, access, modify JSON Object.
      
JSON or JavaScript Object Notation is a light weight, text-based data interchange format.
•	JSON is like XML, it is one of the way of exchanging information between applications.
•	This format of data is widely used by web applications/APIs to communicate with each other.

Reading a JSON file:
Method 1:
Using require method: The simplest method to read a JSON file is to require it in a node.js file using require() method.
Syntax:
const data = require('path/to/file/filename');

Example:
Create a user.json file in the same directory where index.js file present. Add following data to the json file.
Programs:
[user.json]
[
{
"name": "Manohar", "age": 30,
"language": ["MEAN", "Express", "NodeJS"]
},
{
"name": "Jaswanth", "age": 40,
"language": ["Angular", "MEAN", "AngularJS"]
},
{
"name": "Nagendra", "age": 50,
"language": ["JavaScript", "PHP", "Python"]
},
{
 
"name": "Sai", "age": 47,
"language": ["PHP", "Go", "JavaScript"]
}
]

[index.js]
const users = require("./user"); 
console.log(users);
>>>run the file using the command: node index.js

Output:
PS D:\MEAN_532> node index.js
[
  {
    name: 'Manohar',
    age: 30,
    language: [ 'MEAN', 'Express', 'NodeJS' ]
  },
  {
    name: 'Jaswanth',
    age: 40,
    language: [ 'Angular', 'MEAN', 'AngularJS' ]
  },
  {
    name: 'Nagendra',
    age: 50,
    language: [ 'JavaScript', 'PHP', 'Python' ]
  },
  {
    name: 'Sai',
    age: 47,
    language: [ 'PHP', 'Go', 'JavaScript' ]
  }
]

Method 2:
Using the fs module:
We can also use node.js fs module to read a file. The fs module returns a file content in string format so we need to convert it into JSON format by using JSON.parse() in-built method.

[index.js]
const fs = require("fs");
// Read users.json file
fs.readFile("user.json", function(err, data)
 {
// Check for errors 
if (err) throw err;
// Converting to JSON
const users = JSON.parse(data);
console.log(users); // Print users
});
Output:
PS D:\MEAN_532> node index.js
[
  {
    name: 'Manohar',
    age: 30,
    language: [ 'MEAN', 'Express', 'NodeJS' ]
  },
  {
    name: 'Jaswanth',
    age: 40,
    language: [ 'Angular', 'MEAN', 'AngularJS' ]
  },
  {
    name: 'Nagendra',
    age: 50,
    language: [ 'JavaScript', 'PHP', 'Python' ]
  },
  {
    name: 'Sai',
    age: 47,
    language: [ 'PHP', 'Go', 'JavaScript' ]
  }
]

Writing to a JSON file:
We can write data into a JSON file by using the node.js fs module. We can use writeFile method to write data into a file.
Syntax:
fs.writeFile("filename", data, callback);

Program:
const fs = require("fs");
// STEP 1: Reading JSON file const users = require("./users");
// Defining new user
 let us = {
name: "New User", age: 30,
language: ["PHP", "Go", "JavaScript"]
};
// STEP 2: Adding new data to users object
users52.push(us);
// STEP 3: Writing to a file
fs.writeFile("user.json", JSON.stringify(user), err => {
// Checking for errors 
if (err) throw err;

console.log("Done writing"); // Success
});	

Output:
PS D:\MEAN_532> node write.js
Done writing

>>>Now check your user.json file it will looks something like below:

[{"name":"Manohar","age":30,"language":["MEAN","Express","NodeJS"]},{"name":"Jaswanth","age":40,"language":["Angular","MEAN","AngularJS"]},{"name":"Nagendra","age":50,"language":["JavaScript","PHP","Python"]},{"name":"Sai","age":47,"language":["PHP","Go","JavaScript"]},{"name":"New User","age":30,"language":["PHP","Go","JavaScript"]}]


